package com.nike.mm.repository.ws

import org.junit.Test

import spock.lang.Specification

import com.nike.mm.dto.HttpRequestDto
import com.nike.mm.service.IHttpRequestService
import com.nike.mm.service.impl.HttpRequestService

//@RunWith(SpringJUnit4ClassRunner.class)
//@SpringApplicationConfiguration(classes = MeasurementorApplication.class)
//@WebAppConfiguration
class JenkinsWsRepositoryItSpec extends Specification {
	
//	@Autowired 								IJenkinsWsRepository jenkinsWsRepository;
//	
//	@Value('${mm.jenkins.url}') 			String url;
//	
//	@Value('${mm.jenkins.path_postfix}') 	String pathPostfix;
	
	@Test
	def "get all the projects available for the url with no authentication"() {
//		this.jenkinsWsRepository.getListOfRepositoryNames([url: url, path: pathPostfix] as HttpRequestDto);
	}
	
	@Test
	def "simple to get the wiring right"() {
		
		setup:
		HttpRequestDto dto = [url: "http://192.168.37.90:8080", path: "/api/json"] as HttpRequestDto;
		HttpRequestService service = new HttpRequestService();
		
		when:
		def jobs = service.callRestfulUrl(dto);
		for (def job : jobs.jobs) {
			println("----")
			println("$job.name")
			println("$job.url")
			println("----")
			HttpRequestDto dto2 = [url: job.url, path: "/api/json"] as HttpRequestDto;
			HttpRequestService service2 = new HttpRequestService();
			def jobs2 = service.callRestfulUrl(dto2);
			for (def job2 : jobs2.jobs) {
				println("         ----")
				println("             $job2.name")
				println("             $job2.url")
				println("         ----")
			}
			
		}
				
		then:
		jobs != null;
		jobs.isEmpty();
	}
}
